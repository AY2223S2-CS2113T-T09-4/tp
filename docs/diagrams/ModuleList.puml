@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor UI_COLOR_T4
@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package ModuleList {

/'Class AddressBookParser'/
/'Class XYZCommand'/
Class addModule
/'Class Command'/
Class findModule
Class editModule
Class deleteModule
Class listModule
Class calculateCap
Class trackModule
Class listOfModules
Class "<<interface>>\nModuleList" as ModuleListInterface
}

package Print{
Class HiddenModel #FFFFFF
}

package Storage{
Class HiddenModel #FFFFFF
}

package Module{
Class HiddenModel #FFFFFF
}

Class HiddenOutside #FFFFFF
HiddenOutside..> ModuleListInterface

ModuleListInterface --> addModule : executes >
ModuleListInterface --> findModule : executes >
ModuleListInterface --> deleteModule : executes >
ModuleListInterface --> editModule: executes >
ModuleListInterface --> listModule : executes >
ModuleListInterface --> trackModule : executes >
ModuleListInterface --> calculateCap : executes >

Module .up.> listOfModules

addModule -.> Module
editModule ..> Module

deleteModule --> listOfModules : interacts >
findModule --> listOfModules : interacts >
listModule --> listOfModules : interacts >
trackModule --> listOfModules : interacts >
calculateCap --> listOfModules : interacts >

listOfModules ..> Print
listOfModules ..> Storage




/'AddressBookParser ..> XYZCommand : creates > '/

/'XYZCommand -up-|> Command'/


/'Storage --[hidden] Model'/
/'
Command .[hidden]up.> Storage
Command .right.> Model
note right of XYZCommand: XYZCommand = AddCommand, \nFindCommand, etc
'/

/' Command .up.> AddModule : produces > '/
@enduml