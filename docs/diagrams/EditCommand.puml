@startuml

participant ":Parser" as Parser
participant ":ModuleList" as ML
participant ":Module" as Mod
participant ":Print" as Print
[->Parser : CheckUserInput\n(userInput:String, moduleList:ModuleList)
activate Parser
Parser -> Parser : editModuleField\n(moduleList:ModuleList, userInput:String[])
activate Parser


alt MC
    Parser -> ML : editModularCredits(moduleCode:String, newModularCredits:String)
    activate ML
    ML -> Print : printEditedModule(module:Module, moduleListSize:int)
    activate Print
    Print --> ML
    deactivate Print
    ML --> Parser
    deactivate ML
else YEAR
    Parser -> ML : editYear(moduleCode:String, newYear:String)
    activate ML
    ML -> Print : printEditedModule(module:Module, moduleListSize:int)
    activate Print
    Print --> ML
    deactivate Print
    ML --> Parser
    deactivate ML
else SEMESTER
    Parser -> ML : editSemester(moduleCode:String, newSemester:String)
    activate ML
    ML -> Print : printEditedModule(module:Module, moduleListSize:int)
    activate Print
    Print --> ML
    deactivate Print
    ML --> Parser
    deactivate ML
else GRADE
    Parser -> ML : editModuleGrade(moduleCode:String, newGrade:String)
    activate ML
    ML -> Print : printEditedModule(module:Module, moduleListSize:int)
    activate Print
    Print --> ML
    deactivate Print
    ML --> Parser
    deactivate ML
else TYPE
    Parser -> ML : editModuleType(moduleCode:String, moduleType:String)
    activate ML
        ML -> Print : printEditedModule(moduleEdited:Module, moduleListSize:int)
        activate Print
        Print --> ML
        deactivate Print
    ML --> Parser
    deactivate ML
else CODE
    Parser -> ML : editModuleCode(moduleCode:String, moduleType:String)
    activate ML
        ML -> Print : printEditedModule(moduleEdited:Module, moduleListSize:int)
        activate Print
        Print --> ML
        deactivate Print
    ML --> Parser
    deactivate ML
end
Parser --> Parser
deactivate Parser

Parser-->[
deactivate Parser

@enduml